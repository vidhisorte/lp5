import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

train = pd.read_csv("Google_Stock_Price_Train.csv")
test = pd.read_csv("Google_Stock_Price_Test.csv")

train.describe()

train.shape
	
train.dtypes
test.dtypes
	
train['Close'] = train['Close'].str.replace(',','')
train['Close'] = train['Close'].astype(np.float64)
train.dtypes

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()

train['Close'] = scaler.fit_transform(train['Close'].values.reshape(-1,1))
test['Close'] = scaler.fit_transform(test['Close'].values.reshape(-1,1))

train['Close']
	
def create_sequences(data,time_step=6):
    X = []
    y = []
    for i in range(len(data)-time_step):
        X.append(data[i:i+time_step])
        y.append(data[i+time_step])
    return np.array(X),np.array(y)

X_train,y_train = create_sequences(train['Close'])
X_test,y_test = create_sequences(test['Close'])

X_train.shape,y_train.shape	
X_test.shape,y_test.shape

from keras.models import Sequential
from keras.layers import Dense,LSTM

model = Sequential()
model.add(LSTM(units=50,return_sequences=True,input_shape=(X_train.shape[1],1)))
model.add(LSTM(units=50))
model.add(Dense(units=1))

model.compile(optimizer='adam',loss='mse')
model.summary()

history = model.fit(X_train,y_train,epochs=10,batch_size=4,validation_split=0.05)

y_pred = model.predict(X_test)

y_pred = scaler.inverse_transform(y_pred)

y_test = scaler.inverse_transform(y_test.reshape(-1,1))

from sklearn.metrics import mean_squared_error,mean_absolute_error
mse = mean_squared_error(y_test,y_pred)
mae = mean_absolute_error(y_test,y_pred)
print(mse,mae)
	
df_pred = pd.DataFrame({'actual':y_test[:,0],'pred':y_pred[:,0]})
	
plt.plot(df_pred['actual'],label='actual')
plt.plot(df_pred['pred'],label='pred')
plt.legend()
plt.show()
